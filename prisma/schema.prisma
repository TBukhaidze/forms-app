generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum QuestionType {
  SINGLE_LINE_TEXT
  MULTI_LINE_TEXT
  INTEGER
  CHECKBOX
  RADIO
}

model User {
  id        String           @id @default(uuid())
  email     String           @unique
  password  String
  role      Role             @default(USER)
  isBlocked Boolean          @default(false)
  language  String           @default("en")
  theme     String           @default("light")
  templates Template[]       @relation("UserTemplates")
  forms     Form[]           @relation("UserForms")
  comments  Comment[]
  likes     Like[]
  accesses  TemplateAccess[] @relation("UserAccesses")
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([email])
}

model Template {
  id          String           @id @default(uuid())
  title       String
  description String
  isPublic    Boolean          @default(false)
  imageUrl    String?
  tags        String[]
  author      User             @relation("UserTemplates", fields: [authorId], references: [id])
  authorId    String
  topic       Topic            @relation(fields: [topicId], references: [id])
  topicId     String
  questions   Question[]
  forms       Form[]
  comments    Comment[]
  likes       Like[]
  accesses    TemplateAccess[] @relation("TemplateAccesses")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([title])
  @@index([authorId])
}

model TemplateAccess {
  id         String   @id @default(uuid())
  template   Template @relation("TemplateAccesses", fields: [templateId], references: [id])
  templateId String
  user       User     @relation("UserAccesses", fields: [userId], references: [id])
  userId     String

  @@unique([templateId, userId])
}

model Topic {
  id        String     @id @default(uuid())
  name      String     @unique
  templates Template[]
}

model Question {
  id          String       @id @default(uuid())
  title       String
  description String?
  type        QuestionType
  options     String[]
  isRequired  Boolean      @default(true)
  showInTable Boolean      @default(false)
  order       Int
  template    Template     @relation(fields: [templateId], references: [id])
  templateId  String
  answers     Answer[]

  @@index([templateId])
}

model Form {
  id         String   @id @default(uuid())
  template   Template @relation(fields: [templateId], references: [id])
  templateId String
  answers    Answer[]
  author     User     @relation("UserForms", fields: [authorId], references: [id])
  authorId   String
  createdAt  DateTime @default(now()) @map("date")
  updatedAt  DateTime @updatedAt

  @@index([templateId])
  @@index([authorId])
}

model Answer {
  id         String   @id @default(uuid())
  value      String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  form       Form     @relation(fields: [formId], references: [id])
  formId     String

  @@index([questionId])
  @@index([formId])
}

model Comment {
  id         String   @id @default(uuid())
  text       String
  template   Template @relation(fields: [templateId], references: [id])
  templateId String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  createdAt  DateTime @default(now())

  @@index([templateId])
}

model Like {
  id         String   @id @default(uuid())
  template   Template @relation(fields: [templateId], references: [id])
  templateId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@unique([templateId, userId])
}
